const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:7545"));

const express = require('express');
const app = express();
const port = 3000;

app.listen(port, () => {
  console.log("Application started and listening on port 3000");
})

app.use(express.static('public'));
app.use(express.json());

app.get('/accounts', async (req, res) => {
  const accounts = await web3.eth.getAccounts();
  res.json(accounts);
});

app.post('/bai1', async(req, res) => {
  const { x, y, address } = req.body;
  const ABI = [{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}],"name":"execute","outputs":[{"internalType":"uint256","name":"sum","type":"uint256"},{"internalType":"uint256","name":"multiply","type":"uint256"},{"internalType":"uint256","name":"mod","type":"uint256"},{"internalType":"uint256","name":"integer","type":"uint256"}],"stateMutability":"pure","type":"function"}];
  const bytecode = '0x608060405234801561001057600080fd5b50610322806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635601eaea14610030575b600080fd5b61004a600480360381019061004591906100bf565b610063565b60405161005a949392919061010e565b60405180910390f35b60008060008084866100759190610153565b9350848661008391906101a9565b925084866100919190610241565b9150818661009f9190610203565b905092959194509250565b6000813590506100b9816102d5565b92915050565b600080604083850312156100d6576100d56102d0565b5b60006100e4858286016100aa565b92505060206100f5858286016100aa565b9150509250929050565b61010881610237565b82525050565b600060808201905061012360008301876100ff565b61013060208301866100ff565b61013d60408301856100ff565b61014a60608301846100ff565b95945050505050565b600061015e82610237565b915061016983610237565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561019e5761019d610272565b5b828201905092915050565b60006101b482610237565b91506101bf83610237565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156101f8576101f7610272565b5b828202905092915050565b600061020e82610237565b915061021983610237565b92508282101561022c5761022b610272565b5b828203905092915050565b6000819050919050565b600061024c82610237565b915061025783610237565b925082610267576102666102a1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6102de81610237565b81146102e957600080fd5b5056fea2646970667358221220bf9290d5d355eaee81169a9bff185be65ca016c9ff70617825db06383ed82ccc64736f6c63430008070033';
  
  const contract = new web3.eth.Contract(ABI);
  const account = await web3.eth.getAccounts().then(accounts => {
    return accounts.find(account => account === address);
  });

  contract
    .deploy({ data: bytecode })
    .send({ from: account, gas: 4700000 })
    .then(initContract => {
      initContract.methods.execute(x, y).call((err, data) => {
        res.send(data);
      });
    });
});